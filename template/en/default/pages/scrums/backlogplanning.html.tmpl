[%#
  # The contents of this file are subject to the Mozilla Public
  # License Version 1.1 (the "License"); you may not use this file
  # except in compliance with the License. You may obtain a copy of
  # the License at http://www.mozilla.org/MPL/
  #
  # Software distributed under the License is distributed on an "AS
  # IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  # implied. See the License for the specific language governing
  # rights and limitations under the License.
  #
  # The Original Code is the Scrums Bugzilla Extension.
  #
  # The Initial Developer of the Original Code is "Nokia corporation"
  # Portions created by the Initial Developer are Copyright (C) 2011 the
  # Initial Developer. All Rights Reserved.
  #
  # Contributor(s):
  #  Eero Heino <eero.heino@nokia.com>
  #%]
[% PROCESS global/header.html.tmpl
    title = "Backlog " _ team.name
    style_urls = ['skins/standard/admin.css']
%]

[% PROCESS pages/scrums/listcolumns.html.tmpl %]

<script type="text/javascript">
  var unordered_items_search_url = "buglist.cgi?query_format=advanced&";
  unordered_items_search_url += "columnlist=bug_severity%2Cpriority%2Cassigned_to%2Cbug_status%2Cshort_desc%2Cestimated_time%2Cactual_time%2Cremaining_time%2Cscrums_team_order%2Cscrums_blocked%2Csprint_name&";
  unordered_items_search_url += "[% FOREACH status IN bug_status_open %]bug_status=[% status %]&[% END %]";
  unordered_items_search_url += "[% FOREACH class IN classifications %]classification=[% class %]&[% END %]";
  unordered_items_search_url += "[% FOREACH product IN products %]product=[% product %]&[% END %]";
  unordered_items_search_url += "[% FOREACH component IN components %]component=[% component %]&[% END %]";

  var unordered_bugs = new listObject("sortable2", "headers2", '-1', 'Unprioritized', create_item_line_html, unordered_items_search_url);
  unordered_bugs.show_columns.push('creation_date')
  unordered_bugs.show_columns.splice( $.inArray('order', unordered_bugs.show_columns), 1 );

  var backlog_search_url = search_link_sprint_items([% backlog_id %]);
  var backlog = new listObject("sortable", "headers", "[% backlog_id %]", 'Backlog', create_item_line_html, backlog_search_url);
  backlog.show_columns.push('creation_date')

  var sprint = new listObject("sortableX", "headers", "[% active_sprint.id() %]", 'Sprint [% active_sprint.name() %]'); // Idle list

  // *** Global variables ***
  schema = 'backlog';
  object_id = [% team.id %];

  var all_lists = [];
  var unordered_items_rendered = false;
  var backlog_rendered = false;
  var sprintbugs_received = false;
  var initialised = false;

  var bug_positions = [];

  function save_all()
  {
      var saved_lists = [];
      saved_lists.push(sprint);         // Idle list
      saved_lists.push(all_lists[0]);
      saved_lists.push(all_lists[1]);
      do_save(saved_lists);
  }

  $(document).ready(function() {
    var html = '';

    all_lists.push(backlog);
    all_lists.push(unordered_bugs);

    [% IF active_sprint_id %]
        $.post('page.cgi?id=scrums/ajaxbuglist.html', {
            sprint_id: [% active_sprint_id() %]
        }, receive_sprintbugs, 'json');
    [% ELSE %]
        bind_items_to_list(sprint, []); // Bug list is empty since there is even no sprint
        sprintbugs_received = true;     // There is no point in waiting for sprint to arrive, that does not even exist.
    [% END %]

    $.post('page.cgi?id=scrums/ajaxbuglist.html', {
        sprint_id: [% backlog_id %]
    }, renderBacklog, 'json');

    $.post('page.cgi?id=scrums/ajaxbuglist.html', {
        action: "unprioritised_items",
        team_id: [% team.id() %]
    }, renderItems, 'json');

    window.onbeforeunload = detect_unsaved_change;
  });

function renderBacklog(result)
{
    data = result.data;
    var backlog_bugs = data.bugs;

    bind_items_to_list(backlog, backlog_bugs);
    backlog_rendered = true;
    check_receive_status();
}

function renderItems(result)
{
    data = result.data;
    var unprioritised_items = data.bugs;

    bind_items_to_list(unordered_bugs, unprioritised_items);
    unordered_items_rendered = true;
    check_receive_status();
}

function receive_sprintbugs(result)
{
    data = result.data;
    var sprint_bugs = data.bugs;

    bind_items_to_list(sprint, sprint_bugs);
    sprintbugs_received = true;
    check_receive_status();
}

function check_receive_status()
{
    if(backlog_rendered && unordered_items_rendered && sprintbugs_received)
    {
        render_all();
        initialised = true;
        toggle_scroll();
    }
}

function update_tables()
{
    update_lists(backlog, 0);
    update_lists(unordered_bugs, 0);
    bind_sortable_lists(all_lists); // Does not initialise tablesorter
}

</script>

<div class="bz_title_container">
  [% team.name %] Product Backlog
</div>

[% PROCESS pages/scrums/navi.html.tmpl %]

<table class="dragcontainment" width="100%" cellpadding="5">
  <tr>
    <td valign="top" id="sprint" width="50%">
    </td>
    <td valign="top" id="unordered" width="50%">
    </td>
  </tr>
  <tr>
    <td colspan="2" align="right">
      <input type="button" class="scrums_wide_button" id="save_button" disabled="true" value="Save" onClick="save_all();" />
      <input type='button' class='toggle_scroll' value='Toggle Scroll Bars' onClick="toggle_scroll();" />
    </td>
  </tr>
</table>

<hr />

<p>
  <a href="page.cgi?id=scrums/createteam.html&teamid=[% team.id %]">Manage Team</a>
</p>

[% PROCESS global/footer.html.tmpl %]
