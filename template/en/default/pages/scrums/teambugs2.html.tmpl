[%#
  # The contents of this file are subject to the Mozilla Public
  # License Version 1.1 (the "License"); you may not use this file
  # except in compliance with the License. You may obtain a copy of
  # the License at http://www.mozilla.org/MPL/
  #
  # Software distributed under the License is distributed on an "AS
  # IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  # implied. See the License for the specific language governing
  # rights and limitations under the License.
  #
  # The Original Code is the Scrums Bugzilla Extension.
  #
  # The Initial Developer of the Original Code is "Nokia Corporation"
  # Portions created by the Initial Developer are Copyright (C) 2011 the
  # Initial Developer. All Rights Reserved.
  #
  # Contributor(s):
  #  Eero Heino <eero.heino@nokia.com>
  #%]

[% PROCESS global/header.html.tmpl
    title = "Sprint Planning " _ team.name 
    style_urls = ['skins/standard/admin.css']
%]

[% PROCESS global/lists.html.tmpl %]
<!--
      <input type="hidden" name="teamid" value="<#= teamid #>" />
      <input type="hidden" name="sprintid" value="[% sprintid %]" />
-->
<script type="text/JavaScript" src="extensions/Scrums/web/js/jquery.form.js"></script>
<script id="NewSprintTmpl" type="text/html">
    <form id='new_sprint_form' action='page.cgi' method="post">
      <input type='hidden' name='teamid' value='[% team.id %]' />
      <# if (sprintid != 0) { print("<input type='hidden' name='sprintid' value='"+sprintid+"' />"); } #>
      <input type='hidden' name='id' value='scrums/ajaxsprintbugs.html' />

      <table>
        <tr>
          <th>Sprint Name:</th>
          <td colspan="2"><input type="text" name="sprintname" value="[% sprintname %]"></td>
        </tr>
        <tr>
          <th>Nominal Schedule:</th>
          <td><input onchange="gettime();" type="text" value="[% nominalschedule %]" name="nominalschedule" id="datepicker_nominal" size="08"></td>
        </tr>
        <tr>
          <th>Description:</th>
          <td colspan="2"><input size="40" type="text" name="description" value="[% description %]"></td>
        </tr>
        <tr>
          <th>Actual Duration:</th>
          <td colspan=3">
             <input onchange="gettime();" type="text" value="[% start_date %]" name="start_date" id="datepicker_min" size="08">-
             <input onchange="gettime();" type="text" value="[% end_date %]" name="end_date" id="datepicker_max" size="08">
          </td>
        </tr>
        <tr><td colspan="4"></td></tr>
        <tr>
          <td colspan="4" align="right">
            <input type="button" value="Cancel" onclick="get_sprint();"/>
              <# if (edit) { #>
              <input type='hidden' name='schema' value='editsprint' />
                <input type="submit" name='editsprint' value="Save" onclick="return checkvalues();"/>
              <# } else { #>
              <input type='hidden' name='schema' value='newsprint' />
                <input type="submit" name='newsprint' value="Create" onclick="return checkvalues();"/>
              <# } #>
            
          </td>
        </tr>
        <tr>
          <td colspan="4" align="right">
            <input type="submit" value="Delete" name='deletesprint' />
            <input type="submit" name='archivesprint' value="Archive" />
          </td>
        </tr>
      </table>
    </form>
</script>



<script type="text/javascript">
  var team_id = [% team.id %];
  var backlog = new listObject("sortable2", "headers2", "[% backlog.sprint.id() %]", 'Backlog', $("#TeamBugLiTmpl"));

  var sprint = new listObject("sortable", "headers", "[% sprint.id() %]", 'Sprint [% sprint.name() %]', $("#TeamBugLiTmpl"));

  var all_lists = [];

  function save_all()
  {
     //save_lists(sprint_lists, backlog, 'team', [% team.id %]);
     save(all_lists, 'team', [% team.id %]);
  }

  // data from backend
 var sprint_list_data = {[% FOREACH team_sprint IN team_sprints_array %] [% team_sprint.sprint.id() %]: ["[% team_sprint.sprint.name() %]",[[% FOREACH bug IN team_sprint.bugs %]
 [% bugid = bug.0 %]
 [[[% bug.0 %],"[% "${bugid}" FILTER bug_link(bugid) FILTER none | replace( '"', '\'' ) %]"], [% bug.1 %], "[% bug.2 %]", "[% bug.3 %]", "[% bug.4 | replace( '"', '\"' ) %][% IF (bug.5.length > 40) %]...[% END %]", "[% bug.5 | replace( '"', '\'' ) %]"],[% END %]], "[% team_sprint.sprint.status() %]", "[% team_sprint.sprint.nominal_schedule() %]", "[% team_sprint.sprint.description() | replace( '"', '\"' ) %]"],[% END %]};
 var backlog_bugs = [[% FOREACH bug IN backlog.bugs %]
 [% bugid = bug.0 %]
 [[[% bug.0 %],"[% "${bugid}" FILTER bug_link(bugid) FILTER none | replace( '"', '\'' ) %]"], [% bug.1 %], "[% bug.2 %]", "[% bug.3 %]", "[% bug.4 | replace( '"', '\"' ) %][% IF (bug.5.length > 40) %]...[% END %]", "[% bug.5 | replace( '"', '\'' ) %]"],[% END %]];


 var sprint_bugs = [[% FOREACH bug IN sprint.get_bugs() %] [% bugid = bug.0 %]
 [[[% bug.0 %],"[% "${bugid}" FILTER bug_link(bugid) FILTER none | replace( '"', '\'' ) %]"], [% bug.1 %], "[% bug.2 %]", "[% bug.3 %]", "[% bug.4 | replace( '"', '\"' ) %][% IF (bug.5.length > 40) %]...[% END %]", "[% bug.5 | replace( '"', '\'' ) %]"],[% END %]];

 var foo = "[% sprint.name() %]";

 var sprint_lists = [];

 $(document).ready(function() {
    var html = '';
//    for (id in sprint_list_data)
//    {
//        // last argument is the name
//        var list = new listObject('sprint_list_' + id, 'sprint_header_' + id, id, sprint_list_data[id][0], $("#TeamBugLiTmpl"));
//        // last argument is the bug list
//        // extra stuff for sprint
//        list._status = sprint_list_data[id][2]
//        list.nominal_schedule = sprint_list_data[id][3]
//        list.description = sprint_list_data[id][4]
//
//        html = parseTemplate($('#ListTmpl').html(), { list: list, extra_middle: "" });
//        $(html).appendTo($('#sprints'));
//        update_lists(list, 0, sprint_list_data[id][1]);
//
//        // expand collapse
//        //$("#"+list.ul_id).hide();
//        //toggle the componenet with class msg_body
//        var ul_id = list.ul_id;
//        $("#" + list.h_id).click(function()
//        {
//            $(this).nextAll(".content:first").slideToggle(500);
//        });
//
//        sprint_lists.push(list);
//
//    }
    //$('#sprints').html(html);

    sprint._status = "[% sprint.sprint.status() %]";
    sprint.nominal_schedule = "[% sprint.sprint.nominal_schedule() %]";
    sprint.description = "[% sprint.sprint.description() | replace( '"', '\"' ) %]";

    $('#unordered').html(parseTemplate($('#ListTmpl').html(), { list: backlog, extra_middle: '' }));
    update_lists(backlog, 0, backlog_bugs);

    $('#sprint').html(parseTemplate($('#ListTmpl').html(), { list: sprint, extra_middle: '' }));
    update_lists(sprint, 0, sprint_bugs);
    all_lists.push(sprint);
    //all_lists = $.extend(true, [], [sprint]);

    //all_lists = $.extend(true, [], sprint_lists);
    all_lists.push(backlog);
    all_lists = [sprint, backlog];
    bind_sortable_lists(all_lists);
    get_sprint();
  });
</script>

<script type="text/javascript">

<!-- TODO TODO TODO TODO TODO -->
<!-- This temporary hack is for compatibility in merge-->
[% active_sprint = sprint %]

    // Id of that field, which is currently in editable state
    var editedFieldid = "";
  
    // Value (index) of select-element, which was selected when field became to editable state
    var originalSelectedIndex = "";

    function checkIfEditedFieldChanged(mustsave, mustask) {
        var newValue = "";
        var userId = editedFieldid.match(/^\d{1,6}/);
        editableEl = document.getElementById(editedFieldid + "_editable");
        var selectEl = editableEl.getElementsByTagName("select")[0];
        var selectedIndex = selectEl.selectedIndex;

        if (originalSelectedIndex != selectedIndex) {
            // If value is not saved (or it has not changed), original value is restored
            newValue = selectEl.options[selectedIndex].value;
            if (decidetosave(editedFieldid, mustsave, mustask)) {
                save(editedFieldid, newValue);
                makeSelectStatic(editedFieldid, selectEl.value);
            } else {
                makeSelectStatic(editedFieldid, originalValue);
            }
        } 
        else {
            makeSelectStatic(editedFieldid, originalValue);
        }
        editedFieldid = "";
        originalValue = "";
    }
  
    /**
     * Function solves whether changed value of field will be saved or not.
     */
    function decidetosave(fieldid, mustsave, mustask) {
        var decission = false;
  
        // If mustsave is false, this function does nothing, but this is really for clarity of code.
        if (mustsave) {
            if (mustask) {
                if (confirm("Do you want to save changes")) {
                    decission = true;
                } 
		else {
                    decission = false;
                }
            } else {
                decission = true;
            }
        } 
	else {
            decission = false;
        }
        return decission;
    }
  
    /**
     * Function saves value.
     */
    function save(fieldid, newValue, mustask) {
        var userId = fieldid.match(/^\d{1,6}/);
  
        savePersonCapacity(userId, newValue); 
    }

    /**
     * Function is call-back function, that is called after succesfull ajax call returns.
     * Ajax call if succesfull, if server responds without throwing exception. Ordered
     * errors are shown in error message. Function shows status of saving to user.
     */
    function saveResponse(response, status, xhr) {
        var retObj = eval("(" + response + ")");

        if (retObj.errors) {
            alert("There are errors: " + retObj.errormsg);
        } 
	else {
            alert("Success");
        } 
    }
  
    /**
     * Function saves value of one bug field into database by doing ajax-call.
     */
    function savePersonCapacity(personId, capacityValue) {
        var json_params = '{ "method": "personcapacity.update", "params": { "sprint_id" : [% active_sprint.id() %], "person_id" : '+personId+', "capacity": '+capacityValue+' } }';
  
        $.post('page.cgi?id=scrums/ajax.html', {
            schema: 'personcapacity',
            action: 'update',
            data: json_params
        }, saveResponse, 'text');
    }
  
    function makeeditable(fieldid) {
        var status = false;
        var staticId = fieldid + "_static";
        var editableId = fieldid + "_editable";
        var staticEl = document.getElementById(staticId);
        var editableEl = document.getElementById(editableId);
  
        if (editedFieldid != "" && editedFieldid != fieldid) {
            status = checkIfEditedFieldChanged(true /* must save */ , true /* must ask first */ );
        }

        editedFieldid = fieldid;
        // Visibility is changed by changing CSS-style of TR-elements.
        staticEl.style.visibility = 'collapse';
        editableEl.style.visibility = 'visible';
  
        var spanEl = staticEl.getElementsByTagName("span")[0];
        // Title of element equals actual value in every field
        var textVal = spanEl.title;
        var selectEl = editableEl.getElementsByTagName("select")[0];
        var allOptions = selectEl.options;
        var selectedIndex = 0;
        var i = 0;
        for (i = 0; i < allOptions.length; i++) {
            if (allOptions[i].value == textVal) {
                selectedIndex = i;
                break;
            }
        }
        var selectedItem = selectEl.options[selectedIndex];
        originalSelectedIndex = selectedIndex;
        originalValue = selectedItem.value;
        selectEl.value = selectedItem.value;
    }
  
    /**
     * Function makes static field visible and makes editable field hidden
     */
    function makeSelectStatic(fieldid, currentValue) {
        var staticId = fieldid + "_static";
        var editableId = fieldid + "_editable";
        var staticEl = document.getElementById(staticId);
        var editableEl = document.getElementById(editableId);
  
        // Value is set to select-element once more. This has meaning, if original value is restored.
        var selectEl = editableEl.getElementsByTagName("select")[0];
        selectEl.value = currentValue;
  
        var newText = '<span title="' + currentValue + '">' +
                '<table><tr><td>' + 
		currentValue + 
		'</td><td><span class="ui-icon ui-icon-triangle-1-s" title="edit"></span></td></tr></table>' +
 		'</span>';
  
        var td = staticEl.getElementsByTagName("td")[0];
        td.innerHTML = newText;
  
        staticEl.style.visibility = 'visible';
        editableEl.style.visibility = 'collapse';
    }
</script>


<div class="bz_title_container">
  [% team.name %] Sprint
</div>

<form action=''>
<input type='hidden' value='scrums/teambugs2.html' name='id' />
<input type='hidden' value='[% team.id %]' name='teamid' />
Select sprint:
<select name='sprintid' onchange='get_sprint();' id='selected_sprint'>
    [% FOREACH name IN team_sprints_array %]
    <option value="[% name.sprint.id() %]"[% IF name.sprint.id() == sprint.id() %] selected='selected'[% END %]>
    [% IF name.sprint.is_current() %]*[% END %][% name.sprint.name %]</option>[% END %]
    <option value="new_sprint">&#060; new sprint &#062;</option>
</select>
</form>
Sprint capacity estimate: [% capacity.sprint_capacity %]<br>
Work done in sprint: [% capacity.work_done %]<br>
Remaining work in sprint: [% capacity.remaining_work %]<br>
Estimated free capacity: [% capacity.free_capacity %]<br>

<table>
  <tr>
     <td colspan='2' id='sprint_info'>
     </td>
  </tr>
  <tr>
    <td valign='top' id='sprint'>
    </td>
    <td valign='top' id='unordered'>
    </td>
  </tr>
  <tr>
    <td colspan="2" align="right">
      <input type='button' class='toggle_scroll' value='Toggle Scroll Bars' onClick="toggle_scroll();" />
      <input type='button' value='Save' OnClick='save_all();'/> 
    </td>
  </tr>
</table>

[% members = team.members() %]

<table>
  <tr>
    <th>
      Team member
    </th>
    <th>
      Capacity estimate
    <th>
    <th>
      Work in sprint
    <th>
  </tr>
  [% FOREACH user IN members %]
    <tr>
      <td>
        [% user.name() %]
      </td>
      <td>
        <table>
          <tr id="[% user.userid %]_static">
            <td ondblclick="makeeditable('[% user.userid %]');">
              <span title='[% active_sprint.get_member_capacity(user.userid) %]'> 
                <table>
		  <tr>
 	            <td>
		      [% active_sprint.get_member_capacity(user.userid) %]
		    </td>
		    <td>
		      <span class="ui-icon ui-icon-triangle-1-s" title="edit">
		      </span>
		    </td> 
	          </tr>
                </table>
              </span>
            </td>
          </tr>
          <tr id="[% user.userid %]_editable" style="visibility: collapse;">
            <td>
              <table>
                <tr>
                  <td>
                    <select>
                      <option>0.00</option>
                      <option>0.25</option>
                      <option>0.50</option>
                      <option>0.75</option>
                      <option>1.00</option>
                    </select>
                  </td>
                  <td>
                    <span class="ui-icon ui-icon-arrowreturnthick-1-w" title="cancel"" onclick="checkIfEditedFieldChanged(false);"></span>
                  </td>
                  <td>
                    <span class="ui-icon ui-icon-check" title="save" onclick="checkIfEditedFieldChanged(true);"></span>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
      </td>
      <td>
        [% active_sprint.get_member_workload(user.userid) %]
      </td>
    </tr>
  [% END %]
</table>

<!-- team_sprint = team_sprints_array.first() -->
[% team_sprint = sprint %]

<!-- TODO TODO TODO TODO TODO -->
<!-- This temporary hack is for compatibility in merge-->
<a href="page.cgi?id=scrums/newsprint.html&teamid=[% team.id %]&sprintid=[% sprint.id() %]&editsprint=true">Edit Sprint</a>

<!--
<p>
  <a href="page.cgi?id=scrums/newsprint.html&teamid=[% team.id %]&addsprint=true">Add Sprint</a> 
| <a href="page.cgi?id=scrums/newsprint.html&teamid=[% team.id %]&sprintid=[% team_sprint.sprint.id() %]&editsprint=true">Edit Sprint</a>
</p>
-->

<hr />

<p>
  <a href="page.cgi?id=scrums/createteam.html&teamid=[% team.id %]">Manage Team</a><br>
</p>

[% PROCESS global/footer.html.tmpl %]
