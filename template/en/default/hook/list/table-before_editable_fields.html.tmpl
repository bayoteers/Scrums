[% USE Bugzilla %]
[% USE date %]
[% SET select_fields = {} %]
[% FOREACH field = Bugzilla.get_fields(
  { type => constants.FIELD_TYPE_SINGLE_SELECT, custom => 0 })
%]
  [% select_fields.${field.name} = field %]
[% END %]

<script type="text/JavaScript" src="extensions/Scrums/web/js/jquery/js/jquery-1.4.4.min.js"></script>
<script type="text/JavaScript" src="extensions/Scrums/web/js/jquery/js/jquery-ui-1.8.10.custom.min.js"></script>

<script>
var editedFieldid = "";
var originalValue = "";
var originalSelectedIndex = "";

function getInputElementByParentId(parentId)
{
    var parentEl = document.getElementById(parentId);
    var inputsList = parentEl.getElementsByTagName("input");
    return inputsList[0];
}

function checkIfEditedFieldChanged()
{
    var status = false;

    var editField = getInputElementByParentId(editedFieldid + "_editable");
    var newValue = "";
    if(editField)
    {
        newValue = editField.value;	
        if(newValue != originalValue)
        {
	    if(save(editedFieldid, newValue))
    	    {
    		makeInputStatic(editedFieldid, newValue); 
		status = true;
    	    }
            else
            {
    	        makeInputStatic(editedFieldid, originalValue);
		status = false;
            }
        }
        else
        {
	    makeInputStatic(editedFieldid, originalValue);
            status = false;
        }
    }
    else
    {
    // Else input is selection. Must be handled separately.
        editableEl = document.getElementById(editedFieldid + "_editable");
	var selectEl = editableEl.getElementsByTagName("select")[0];
	var selectedIndex = selectEl.selectedIndex;
	if(originalSelectedIndex != selectedIndex)
	{
	    newValue = selectEl.options[selectedIndex].value;
	    if(save(editedFieldid, newValue))
    	    {
    	        makeSelectStatic(editedFieldid, selectedIndex); 
            }
            else
            {
    	        makeSelectStatic(editedFieldid, originalSelectedIndex);
            }
	}
        else
        {
    	    makeSelectStatic(editedFieldid, originalSelectedIndex);
        }
    }

    editedFieldid = "";
    originalValue = "";
    return status;
}

function save(fieldid, newValue) 
{
    var bugId = fieldid.match(/^\d{1,6}/);
    var fieldName = fieldid.substr(bugId[0].length + 1);
    if(confirm("Do you want to save changes in "+fieldName))
    {
	saveBugField(bugId[0], fieldName, newValue);
	return true;
    }
    else
    {
//        var editField = getInputElementByParentId(editedFieldid + "_editable");	
//	editField.value = originalValue;
	return false;
    }
}

function saveResponse(response, status, xhr) 
{ 
	var retObj = eval("("+ response+")");
	if(retObj.errors)
	{
		alert("There are errors: "+retObj.errormsg);
	}
	else
	{
		alert("Success");
	}
}

function saveBugField(bugId, fieldName, newValue)
{
    var json_params = '{ "method": "Bug.update", "params": {"ids" : [' +bugId+ '], "' +fieldName+ '" : "' +newValue+ '"}, "id" : 0 }';

// Can move to back to asynchronous calling after reloading is removed

//    $.post('page.cgi?id=scrums/ajax.html', {
//        schema: 'bug',
//        action: 'update',
//        data: json_params
//    }, saveResponse        , 'text');

    $.ajax({ async: false,
	url: 'page.cgi?id=scrums/ajax.html', 
	data: {
        	schema: 'bug',
        	action: 'update',
	        data: json_params },
	success: saveResponse }
    );
}

function makeeditable(fieldid) 
{
    var status = false;

    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);

    if(editedFieldid != "" && editedFieldid != fieldid)
    {
        status = checkIfEditedFieldChanged();
    }
    editedFieldid = fieldid;
    staticEl.style.visibility = 'collapse';
    editableEl.style.visibility = 'visible';
	
    var allInputs = editableEl.getElementsByTagName("input");
    if(allInputs.length > 0)
    {
	originalValue = allInputs[0].value;
    }
    else 
    {
	// Else input is selection. Must be handled separately.
	var spanEl = staticEl.getElementsByTagName("span")[0];
	var textVal = spanEl.title;
	var selectEl = editableEl.getElementsByTagName("select")[0];
	var allOptions = selectEl.options;
	var i = 0;
        for(i = 0; i < allOptions.length; i++)
        {
	    if(allOptions[i].value == textVal)
	        break;
	}
	var selectedIndex = i;
	var selectedItem = selectEl.options[selectedIndex];
	originalSelectedIndex = selectedIndex;
	originalValue = selectedItem.value;
    }
}

function makeInputStatic(fieldid, currentvalue) 
{
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);

    staticEl.firstChild.innerHTML = currentvalue;

    staticEl.style.visibility = 'visible';
    editableEl.style.visibility = 'collapse';

    var allInputs = editableEl.getElementsByTagName("input");
    allInputs[0].value = currentvalue;
}

function makeSelectStatic(fieldid, currentSelectedIndex) 
{
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);

    var selectEl = editableEl.getElementsByTagName("select")[0];
    selectEl.selectedIndex = currentSelectedIndex;

    var selectedItem = selectEl.options[currentSelectedIndex];
    var currentValue = selectedItem.value;

    var abbr = currentValue.substr(0, 3);
    var newText = '<span title="' + currentValue + '">' + abbr + '</span>';
    staticEl.firstChild.innerHTML = newText;

    staticEl.style.visibility = 'visible';
    editableEl.style.visibility = 'collapse';


}

</script>

<p><b>Before editable fields</b></p>

